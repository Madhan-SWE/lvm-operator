name: Manual Operator Build Dispatch

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to Build From'
        required: true
      tag:
        description: 'Additional tag for the build (such as alpha, beta, etc.) - Optional'
        default: ''
env:
  GO_VERSION: "1.18"
  IMG: "quay.io/lvmo/lvm-operator"

jobs:
  build-and-publish-image:
    name: Build and publish the LVMO image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
          ref: ${{ github.event.inputs.branch }}
      - uses: actions/checkout@v2

      # 'test' is a sub-target of 'docker-build' and so cache go build & mod
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Login to quay (quay.io/lvmo)
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_LVMO_ROBOT_NAME_2 }}
          password: ${{ secrets.QUAY_LVMO_ROBOT_TOKEN_2 }}

      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: Prepare image tag
        id: prep
        run: |
          LVMO_OPERATOR_IMAGE=${{env.IMG}}:${{ github.event.inputs.branch }}-${{ steps.date.outputs.date }}
          echo ::set-output name=operator-img::${LVMO_OPERATOR_IMAGE}

      - name: Build operator docker image
        run: make docker-build-combined IMG=${{steps.prep.outputs.operator-img}}

      - name: Publish operator image
        run: make docker-push IMG=${{steps.prep.outputs.operator-img}}
